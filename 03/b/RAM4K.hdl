// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Put your code here:
	// use 8 RAM512 to implement this RAM4k,
	// and use the address[9..11] to select RAM512, use give the address[0..8] to RAM512 as parameter
	
	DMux8Way(in=load, sel=address[9..11], a=RAM0, b=RAM1, c=RAM2, d=RAM3, e=RAM4, f=RAM5, g=RAM6, h=RAM7);

	RAM512(in=in, load=RAM0, address=address[0..8], out=o1);
	RAM512(in=in, load=RAM1, address=address[0..8], out=o2);
	RAM512(in=in, load=RAM2, address=address[0..8], out=o3);
	RAM512(in=in, load=RAM3, address=address[0..8], out=o4);
	RAM512(in=in, load=RAM4, address=address[0..8], out=o5);
	RAM512(in=in, load=RAM5, address=address[0..8], out=o6);
	RAM512(in=in, load=RAM6, address=address[0..8], out=o7);
	RAM512(in=in, load=RAM7, address=address[0..8], out=o8);

	Mux8Way16(a=o1, b=o2, c=o3, d=o4, e=o5, f=o6, g=o7, h=o8, sel=address[9..11], out=out);
}