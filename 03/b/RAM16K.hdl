// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
	// use 4 RAM4k to implement this RAM16k,
	// and use the address[12..13] to select RAM4k, use give the address[0..11] to RAM4k as parameter
	
	DMux4Way(in=load, sel=address[12..13], a=RAM0, b=RAM1, c=RAM2, d=RAM3);

	RAM4K(in=in, load=RAM0, address=address[0..11], out=o1);
	RAM4K(in=in, load=RAM1, address=address[0..11], out=o2);
	RAM4K(in=in, load=RAM2, address=address[0..11], out=o3);
	RAM4K(in=in, load=RAM3, address=address[0..11], out=o4);

	Mux4Way16(a=o1, b=o2, c=o3, d=o4, sel=address[12..13], out=out);
}