// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	/** The length of the current string. */
	field int len;
	
	/** The max length of the char array. */
	field int maxLen;
	
	/** The char array. */
	field Array chars;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        /** Avoiding the null. */
		if(maxLength = 0){
           let maxLength = 1;   
        }

        let len = 0;
        let maxLen = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Memory.deAlloc(chars);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return len;
	}

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let chars[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		/** Note that: if the len is lower than the max length. */
		// len can equal the max length
		if(len<maxLen){
			let chars[len]=c;
			let len = len+1;
		}
		return this;
	}

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if(len>0){
			let len = len-1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int value,index;
		var boolean isNeg;
		
		/** To memory the integer sum. */
		let value = 0;
		let index = 0;
		
		// The integer is negitive.
		if((len>0) & (chars[index]=45)){
			let isNeg = true;
			// Let the index start from digit char.
			let index = 1;
		// len=0 and the integer is positive.
		}else{
			let isNeg = false;
			let index = 0;
		}
		
		// The index is lower than length. And the current char is digit
		while((index<len) & (~(chars[index]<48) & ~(chars[index]>57))){
			// Compute value.
			let value = (value*10)+(chars[index]-48);
			let index = index+1;
		}
		
		if(isNeg){
			return -value;
		}else{
			return value;
		}
	
	}

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		// clear the string
		let len = 0;
		
		if(val<0){
			// The means throw the minus symbol.
			let val = -val;
			// Append the minus symbol.
			do appendChar(45);
		}
		
		do setIntAss(val);
		return;
    }
	
	method void setIntAss(int number){
		var int nextNum;
		
		if(number < 10){
			do appendChar(number+48);
		}else{
			let nextNum = number/10;
			do setIntAss(nextNum);
			do appendChar((number-(nextNum*10))+48);
		}
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
	}

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
	}
}
