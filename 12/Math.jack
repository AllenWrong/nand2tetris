// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array twoToThe;

    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384;
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if( x<0 ){
			return -x;
		}else{
			return x;
		}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum;
		var int shiftdX;
		var int i;
		
		let sum = 0;
		let shiftdX = x;
		let i = 0;
		while(i < 16){
			if(~((y&twoToThe[i]) = 0)){
				let sum = sum + shiftdX;
			}
			let shiftdX = shiftdX + shiftdX;
			let i = i+1;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var boolean isMi;
		var int q;
		var int absResult;
		
		if ((y<0) | (x<0)){
			let isMi = true;
		}else{ 
			let isMi = false;
		}
		if(isMi){
			let x = Math.abs(x);
			let y = Math.abs(y);
		}
		
		/** This is the trivial situation. */
		if(y > x){
			return 0;
		}
	
		let q = Math.divide(x, y+y);
		
		/** Using the bracket to ensure priority. */
		if( x-(2*q*y) < y){
			let absResult = q+q;
		}
		else{
			let absResult = q+q+1;
		}
		
		if(isMi){
			return -absResult;
		}else{
			return absResult;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y;
		var int i;
		var int yPlusTwoEj;
		var int condition;
		
		let y = 0;
		let i = 7;
		while(~(i<0)){
			let yPlusTwoEj = y+twoToThe[i];
			let condition = yPlusTwoEj*yPlusTwoEj;
			if (~(condition>x) & (condition>0)){
				let y = yPlusTwoEj;
			}
			let i = i-1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b){
			return a;
		}else{
			return b;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a < b){
			return a;
		}else{
			return b;
		}
    }
	
    /** helper function two to the*/
    function int twoToThe(int i){
        return twoToThe[i];
    }
}
